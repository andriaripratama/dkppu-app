@model DKUPPU.ViewModels.ATPLRenewalViewModel
@{
    ViewBag.Title = "Renewal ATPL";
}
<!-- This update !-->
<div class="jarviswidget jarviswidget-sortable" data-widget-editbutton="false" data-widget-colorbutton="false" role="widget">
    <header>
        <span class="widget-icon"><i class="fa fa-eye"></i></span>
        <h2>Register Form</h2>
        <span class="jarviswidget-loader">
            <i class="fa fa-refresh fa-spin"></i>
        </span>
    </header>
    <div role="content">
        <div class="jarviswidget-editbox"> </div>
        <div class="widget-body">

            <!--Data Applicant Begin-->
            @Html.Partial("../MstRegisterForm/_DataApplicantForm", Model.Applicant)
            <!--Data Applican End-->
            <!--Form Begin-->
            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    <!--ID Primary-->
                    @Html.HiddenFor(model => model.id_trx_license)
                    @Html.HiddenFor(model => model.id_applicant)
                    @Html.HiddenFor(model => model.id_license_category)
                    @Html.HiddenFor(model => model.id_license_type)
                    @Html.HiddenFor(model => model.id_sop_type)

                    <div class="form-group">
                        @Html.LabelFor(model => model.atpl_license_no, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(model => model.atpl_license_no, (IEnumerable<SelectListItem>)ViewBag.atpl_license_no, "Select ATPL No.", new { @class = "form-control" })
                        </div>
                        @Html.LabelFor(model => model.registration_date, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.registration_date, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.radio_phone_no, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.radio_phone_no, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        @Html.LabelFor(model => model.total_flying_hours, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.total_flying_hours, new { htmlAttributes = new { @class = "form-control required-value" } })
                        </div>
                    </div>
                    <!--List type Ratting-->
                    <fieldset>
                        <legend>
                            Type Rating
                        </legend>
                        <div class="form-group">
                            <div class="col-md-2"></div>
                            <div class="col-md-9" id="list-type-ratting">

                            </div>
                        </div>
                    </fieldset>

                    <!--List PPC Ratting-->
                    <fieldset>
                        <legend>PPC</legend>
                        <div class="form-group">
                            <div class="col-md-2"></div>
                            <div class="col-md-9" id="list-ppc-ratting">

                            </div>
                        </div>
                    </fieldset>


                    <!--List Instrument Ratting-->
                    <fieldset>
                        <legend>Instrument Rating</legend>
                        <div class="form-group">
                            <div class="col-md-2"></div>
                            <div class="col-md-9" id="list-instrument-ratting">

                            </div>
                        </div>
                    </fieldset>

                    <!--List Medical Check-->
                    <fieldset>
                        <legend>Medical Check</legend>
                        <div class="form-group">
                            <div class="col-md-2"></div>
                            <div class="col-md-9" id="list-medical-check">

                            </div>
                        </div>
                    </fieldset>

                    <fieldset>
                        <legend>Upload Document</legend>
                        <div class="form-group">
                            <div class="col-md-2"></div>
                            <div class="col-md-9" id="list-upload-doc">
                                @Html.Partial("../MstRegisterForm/_DocUploadForm", Model.MstDocUploadViewModel)
                            </div>
                        </div>

                    </fieldset>
                    <div id="error">
                        <input type="checkbox" id="checkbox-disclaimer" />
                        I understand and aware of my responsibility as a representative of the company or organization as assigned.
                        I further certify under penalty of perjury under Republic of Indonesia law that the information filled in the form above is true and correct.
                    </div>

                    <div class="form-actions">
                        <button class="btn btn-primary" type="submit"> Submit </button>
                        <a href="@Url.Action("Index","Home")" class="btn btn-default"> Cancel </a>
                    </div>
                </div>
                    <!--End Form-->
            }
        </div>
    </div>
</div>

<script>
    $(function () {
        var hasError = 0;
        $('.numberOnly').change(function () {
            //return false;
            $(this).parent().find('span').remove();
            $(this).parent().parent().removeClass('has-error');
            var value = $(this).val();
            var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
            if (!numericReg.test(value)) {
                $(this).after('<span class="help-block">Numeric characters only.</span>');
                $(this).parent().parent().addClass('has-error');
                hasError = hasError + 1;
            }
        });

        // ATPL dropdown change
        $('#atpl_license_no').change(function () {
            var id_mst_license = $(this).val();
            GetTrxLicenseByMstLicense(id_mst_license);
            GetTypeRatingMstLicense(id_mst_license);
            GetPPCRattingByMstLicense(id_mst_license);
            GetInstrumentRatingMstLicense(id_mst_license);
            GetMedicalCheckByMstLicense(id_mst_license);

        });

        function GetTrxLicenseByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetTrxLicenseByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'JSON',
                success: function (data) {
                    $('#registration_date').val(data.lic_issued_date);
                }
            });
        }

        function GetTypeRatingMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetTypeRatingMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-type-ratting').html(data);
                }
            });
        }

        function GetPPCRattingByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetPPCRattingByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-ppc-ratting').html(data);
                }
            });
        }

        function GetInstrumentRatingMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetInstrumentRatingMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-instrument-ratting').html(data);
                }
            });
        }

        function GetMedicalCheckByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetMedicalCheckByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-medical-check').html(data);
                }
            });
        }


        $('form').submit(function () {
            //return false;
            var hasError = 0;
            $form = $('form:first');

            //validasi file type
            $.each($form.find('input[type="file"]'), function (i, val) {
                if (!FileValidation($(this))) {
                    hasError = hasError + 1;
                }
                if (!FileSize($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi is required
            $.each($form.find('.required-value'), function (i, val) {
                if (!IsRequired($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi numeric
            if (!MustNumber($('#total_flying_hours'))) {
                hasError = hasError + 1;
            }

            if (!LessThan1500($('#total_flying_hours'))) {
                hasError = hasError + 1;
            }

            //validasi date form - until
            if (!FromUntilValidate()) {
                hasError = hasError + 1;
            }

            //if hasError has value more than 0 that return false
            if (hasError > 0) {
                return false;
            }
            //return false;
        });

        //validasi is required
        $('.required-value').keyup(function () {
            IsRequired($(this));
        });

        $('.required-value-dropdown').change(function () {
            IsRequired($(this));
        });

        $('.required-value.date-picker').change(function () {
            IsRequired($(this));
        });

        // validasi numerik and less than 400
        $('#total_flying_hours').keyup(function () {
            MustNumber($(this));
        });

        // validasi numerik and less than 400
        $('#total_flying_hours').keyup(function () {
            if (MustNumber($(this))) {
                LessThan1500($(this));
            }

        });

        //validasi file type
        $('input[type="file"]').on("change", function () {
            if (FileValidation($(this))) {
                FileSize($(this));
            }
        });

        function FileValidation(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().parent().removeClass('has-error');
            $(object).parent().parent().removeClass('has-success');

            var allowedExtensions = ["jpg", "pdf", "png"];

            var value = $(object).val(),
                        file = value.toLowerCase(),
                        extension = file.substring(file.lastIndexOf('.') + 1);
            if ($(object).val().length > 0) {
                if ($.inArray(extension, allowedExtensions) == -1) {
                    $(object).after('<span class="help-block">Invalid File. Please upload a File with extension: '+allowedExtensions.join(", ")+'</span>');
                    $(object).parent().parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        // validasi file size document upload
        function FileSize(object) {
            var IsValid = true;
            if ($(object).val().length > 0) {
                $(object).parent().find('span').remove();
                $(object).parent().removeClass('has-error');
                $(object).parent().removeClass('has-success');
                var file = $(object)[0].files[0];
                var maxFileSize = $('#DocUploadFormFileSize').val();

                if (file.size > parseInt(maxFileSize) || file.FileSize > parseInt(maxFileSize)) {
                    $(object).after('<span class="help-block">The file size to big</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        function IsRequired(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().parent().removeClass('has-error');
            $(object).parent().parent().removeClass('has-success');
            var value = $(object).val();
            if (value.length <= 0) {
                $(object).after('<span class="help-block">Is required.</span>');
                $(object).parent().parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }

        function MustNumber(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().parent().removeClass('has-error');
            $(object).parent().parent().removeClass('has-success');
            var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
            var value = $(object).val();
            if (!numericReg.test(value)) {
                $(object).after('<span class="help-block">Numeric characters only.</span>');
                $(object).parent().parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }


        function LessThan1500(object) {
            var IsValid = true;
            var value = $(object).val();
            if (value.length > 0) {
                $(object).parent().find('span').remove();
                $(object).parent().removeClass('has-error');
                $(object).parent().removeClass('has-success');
                if (parseInt(value) < 1500) {
                    $(object).after('<span class="help-block">The score not valid</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                }
                else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

    });
</script>