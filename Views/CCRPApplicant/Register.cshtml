@model DKUPPU.ViewModels.CCRPRegisterFormViewModel
@{
    ViewBag.Title = "Certification of Class Rating Register";
}

<div class="jarviswidget jarviswidget-sortable" data-widget-editbutton="false" data-widget-colorbutton="false" role="widget">
    <header>
        <span class="widget-icon"><i class="fa fa-eye"></i></span>
        <h2>Register Form</h2>
        <span class="jarviswidget-loader">
            <i class="fa fa-refresh fa-spin"></i>
        </span>
    </header>
    <div role="content">
        <div class="jarviswidget-editbox"> </div>
        <div class="widget-body">

            <!--Data Applicant Begin-->
            @Html.Partial("../MstRegisterForm/_DataApplicantForm", Model.Applicant)
            <!--Data Applican End-->
            <!--Form Begin-->
            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    <!--ID Primary-->
                    @Html.HiddenFor(model => model.id_trx_license)
                    @Html.HiddenFor(model => model.id_applicant)
                    @Html.HiddenFor(model => model.id_license_category)
                    @Html.HiddenFor(model => model.id_license_type)
                    @Html.HiddenFor(model => model.id_sop_type)

                    <div class="form-group">
                        @Html.LabelFor(model => model.LicenseType, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(model => model.LicenseType, (IEnumerable<SelectListItem>)ViewBag.LicenseTypeDrop, "Select Lic. Type", htmlAttributes: new { @class = "form-control license-type-ctrp required-value" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CurrentLicenseNo, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(model => model.CurrentLicenseNo, (IEnumerable<SelectListItem>)ViewBag.LicenseNoDrop, "Select License No.", new { @class = "form-control required-value-dropdown" })
                            @Html.HiddenFor(model => model.license_no)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.radio_phone_no, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.radio_phone_no, new { htmlAttributes = new { @class = "form-control required-value", @readonly = "readonly" } })
                        </div>
                        @Html.LabelFor(model => model.total_flying_hours, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.total_flying_hours, new { htmlAttributes = new { @class = "form-control required-value" } })
                            @Html.HiddenFor(model => model.aircraft_category_rating)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.aircraft_category_rating, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-10">
                            @foreach (var item in (IEnumerable<DKUPPU.ViewModels.MstLookupViewModel>)ViewBag.aircraft_category_rating)
                            {
                                <label class="radio radio-inline">
                                    <input id="radio-aircraft-ratting-@item.lookup_value" type="radio" class="radio-aircraft-ratting radiobox" name="aircraft_category_rating" value="@Html.DisplayFor(a=>item.lookup_value)" disabled="disabled" />
                                    <span>@Html.DisplayFor(a => item.lookup_value)</span>
                                </label>
                            }
                        </div>
                    </div>
                    <!--List Aircarft Ratting Button Add and Remove-->
                    <!--List Aircarft Ratting-->
                    <div class="form-group">
                        <div class="col-md-2">
                            <div class="pull-right">
                                <a id="addColumn" role="button" class="btn btn-primary btn-xs"><i class="fa fa-plus"></i></a>
                            </div>  
                        </div>
                        <div class="col-md-9" id="list-aircraft-class-ratting"></div>
                    </div>
                    <!--PPC Type Ratting-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.ppc_type_ratting, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-9" id="list-ppc-ratting">
                        </div>
                    </div>


                    <fieldset>
                        <legend>Upload Document</legend>
                        @Html.Partial("../MstRegisterForm/_DocUploadForm", Model.MstDocUploadViewModel)
                    </fieldset>
                    <div id="error">
                        <input type="checkbox" id="checkbox-disclaimer" />
                        I understand and aware of my responsibility as a representative of the company or organization as assigned.
                        I further certify under penalty of perjury under Republic of Indonesia law that the information filled in the form above is true and correct.
                    </div>

                    <div class="form-actions">
                        <button class="btn btn-primary" type="submit"> Submit </button>
                        <a href="@Url.Action("Index","Home")" class="btn btn-danger"> Cancel </a>
                    </div>
                </div>
            <!--End Form-->
            }
        </div>
    </div>
</div>

<script>

    $(function () {
        // datepicker
        $('.date-picker').datepicker({
            //options
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            //...
        });

        $('div').on("change", ":input.id_class_rating", function (e) {
            e.preventDefault();
            var index = parseInt($(this).parent().parent().attr('id').match(/\d+/));

            var id = $(this).attr("id");
            var itemText = $('#' + id + ' option:selected').text();
            var itemValue = $(this).val();
            $('#TrxLicAircraftCategoryRatingViewModel_' + index + '__class_ratting').empty();
            $('#TrxLicAircraftCategoryRatingViewModel_' + index + '__class_ratting').val(itemText);

            $('#TrxLicPpcViewModel_' + index + '__id_ppc_type_rating').empty();
            $('#TrxLicPpcViewModel_' + index + '__id_ppc_type_rating').val(itemValue);
            $('#TrxLicPpcViewModel_' + index + '__ppc_type_rating').empty();
            $('#TrxLicPpcViewModel_' + index + '__ppc_type_rating').val(itemText);
            $('#TrxLicPpcViewModel_' + index + '__ppc_type_rating_value').empty();
            $('#TrxLicPpcViewModel_' + index + '__ppc_type_rating_value').val(itemText);
        });

        $('#addColumn').click(function (e) {
            e.preventDefault();
            var $AircraftClassRating = $('#table-aircraft');
            var $PPC = $('#table-ppc');
            
            var startIndex = 0;
            var table1 = $AircraftClassRating.find("tr:last").find(':input:first').attr('name').match(/\d+/);
            var table2 = $PPC.find("tr:last").find(':input:first').attr('name').match(/\d+/);
            startIndex = Math.max(table1, table2);

            addRow(e, $AircraftClassRating, startIndex);
            addRow(e, $PPC, startIndex);
        });

        $('div').on("click", "a.remove-row", function (e) {
            e.preventDefault();
            var $AircraftClassRating = $('#table-aircraft');
            var $PPC = $('#table-ppc');
            var trRemove = $(this).parent().parent().attr('id');
            var indexIdTr = trRemove.match(/\d+/);
            Remove(e, "TrxLicAircraftCategoryRatingViewModel_" + indexIdTr, $AircraftClassRating);
            Remove(e, "TrxLicPpcViewModel_" + indexIdTr, $PPC);
        });

        function addRow(e, $tabelData, startIndex) {
            e.preventDefault();
            var trLenght = $tabelData.find('tr.new-tr').length;
            if (parseInt(trLenght) < 1) {
                var $trLast = $tabelData.find("tr:last");
                var $trNew = $trLast.clone();                

                var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
                if ($tabelData.attr('id') == "table-aircraft") {
                    $trNew.find("td:last").html($('<a role="button" class="remove-row btn btn-xs btn-danger"><i class="fa fa-trash-o"></i></a>'));

                    $tabelData.find('tr.old-tr').each(function () {
                        $trNew.find("select option[value='" + $(this).find("input[ID*='__id_class_rating']").val() + "']").remove();
                    });
                }
                var oldNTr = $trNew.attr('id');
                var newNTr = oldNTr.replace('_' + suffix, '_' + (parseInt(startIndex) + 1));
                $trNew.attr('id', newNTr);
                $trNew.removeClass('old-tr');
                $trNew.addClass('new-tr');
                $.each($trNew.find(':input'), function (i, val) {

                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                    $(this).attr('name', newN);

                    // Replaced ID
                    var oldID = $(this).attr('id');
                    var newID = oldID.replace('_' + suffix + '_', '_' + (parseInt(startIndex) + 1) + '_');
                    $(this).attr('id', newID);

                    $(this).val('');
                    $(this).removeClass("input-validation-error");
                    $(this).removeAttr('readonly');
                    $(this).removeAttr('disabled');
                });

                $.each($trNew.find(':input.date-picker'), function (i, val) {
                    $(this).removeClass("hasDatepicker");
                    $(this).datepicker({
                        dateFormat: 'dd/mm/yy',
                        changeMonth: true,
                        changeYear: true
                    });
                });

                $(':input.hasDatepicker').each(function () {
                    /*
                    jQuery(this).on("keypress keyup blur", function (event) {
                        $(this).val($(this).val().replace(/[^\d].+/, ""));
                        if ((!event.which < 48 || !event.which > 57)) {
                            event.preventDefault();
                        }
                    });
                    */

                    $(this).keypress(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keydown(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keyup(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });
                });
                $trLast.after($trNew);
            }
        }
        function Remove(e, TrIdToRemove, $tabelData) {
            e.preventDefault();
            $("#" + TrIdToRemove).remove();
            $.each($tabelData.find('tr'), function (i, val) {

                var oldIndex = $(this).attr('id').match(/\d+/);

                $.each($(this).find(':input'), function (x, val) {
                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + oldIndex + ']', '[' + i + ']');
                    $(this).attr('name', newN);

                    // Replaced ID
                    var oldID = $(this).attr('id');
                    var newID = oldID.replace('_' + oldIndex + '_', '_' + i + '_');
                    $(this).attr('id', newID);
                });

                // replace id tr
                var oldNTr = $(this).attr('id');
                var newNTr = oldNTr.replace('_' + oldIndex, '_' + i);
                $(this).attr('id', newNTr);

            });
        }

        $('#LicenseType').change(function () {
            var licensetype = $(this).val();
            var idapplicant = $('#id_applicant').val();
            GetHisLicTypeByIdApplicanLicType(idapplicant, licensetype);
        });

        function GetHisLicTypeByIdApplicanLicType(idapplicant, licensetype) {
            $.ajax({
                url: '@Url.Action("GetHisLicTypeByIdApplicanLicType", "AJAX")',
                data: {
                    idapplicant: idapplicant,
                    licensetype: licensetype
                },
                dataType: 'JSON',
                success: function (data) {
                    $('#CurrentLicenseNo').empty();
                    $('#CurrentLicenseNo').append('<option value="">Select License No.</option>');
                    $.each(data, function (i, data) {
                        $('#CurrentLicenseNo').append('<option value="' + data.id_lookup + '">' + data.lookup_value + '</option>');
                    });
                }
            });
        }

        /** License on Change **/
        $('#CurrentLicenseNo').change(function () {
            $('#license_no').val($("#CurrentLicenseNo option:selected").text());
            var id_trx_license = $(this).val();
            GetTrxLicenseByMstLicense(id_trx_license);
            GetListAircraftClassRattingWithExisting(id_trx_license);
            GetListPPCRattingWithExisting(id_trx_license);
        });

        /** Get Trx License */
        function GetTrxLicenseByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetTrxLicenseByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license
                },
                dataType: 'JSON',
                beforeSend: function () {
                    var img = '<div class="row">' +
                                '<div class="col-xs-12"><div style="text-align:center;height:200px;padding-top:75px"><img style="width:50px;height:50px" src="@DKUPPU.Helpers.ImageLoader.Loader" /></div>' +
                                '</div></div>';
                    $('#list-aircraft-class-ratting').html(img);
                },
                success: function (data) {
                    $('#total_flying_hours').val(data.total_flying_hours);
                    $('#radio_phone_no').val(data.radio_phone_no);
                    $(':radio[value="' + data.aircraft_category_rating + '"]').attr('checked', 'checked');
                    $('#aircraft_category_rating').val(data.aircraft_category_rating);
                }
            });
        }

        function GetListAircraftClassRattingWithExisting(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetListAircraftClassRattingWithExisting", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-aircraft-class-ratting').html(data);
                }
            });
        }

        function GetListPPCRattingWithExisting(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetListPPCRattingWithExisting", "AJAX")',
                data: {
                    id_mst_license: id_mst_license
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-ppc-ratting').html(data);
                }
            });
        }

        // datepicker
        $('.date-picker').datepicker({
            //options
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            minDate: '12/12/2015'
            //...
        });


        //** Validasi form
        $('form').submit(function () {
            //return false;
            var hasError = 0;
            $form = $('form:first');

            //validasi file type
            $.each($form.find('input[type="file"]'), function (i, val) {
                if (!FileValidation($(this))) {
                    hasError = hasError + 1;
                }
                if (!FileSize($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi is required
            $.each($form.find('.required-value'), function (i, val) {
                if (!IsRequired($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi numeric
            if (!MustNumber($('#total_flying_hours'))) {
                hasError = hasError + 1;
            }

            //if hasError has value more than 0 that return false
            if (hasError > 0) {
                return false;
            }
            //return false;
        });

        //validasi is required
        $('.required-value').keyup(function () {
            IsRequired($(this));
        });

        $('.required-value-dropdown').change(function () {
            IsRequired($(this));
        });

        $('.required-value.date-picker').change(function () {
            IsRequired($(this));
        });


        // validasi numerik and less than 400
        $('#total_flying_hours').keyup(function () {
            if (MustNumber($(this))) {
                LessThan150($(this));
            }

        });

        //validasi file type
        $('input[type="file"]').on("change", function () {
            if (FileValidation($(this))) {
                FileSize($(this));
            }
        });

        function FileValidation(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');

            var allowedExtensions = ["jpg", "pdf", "png"];

            var value = $(object).val(),
                        file = value.toLowerCase(),
                        extension = file.substring(file.lastIndexOf('.') + 1);
            if ($(object).val().length > 0) {
                if ($.inArray(extension, allowedExtensions) == -1) {
                    $(object).after('<span class="help-block">Invalid File. Please upload a File with extension: '+allowedExtensions.join(", ")+'</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        // validasi file size document upload
        function FileSize(object) {
            var IsValid = true;
            if ($(object).val().length > 0) {
                $(object).parent().find('span').remove();
                $(object).parent().removeClass('has-error');
                $(object).parent().removeClass('has-success');
                var file = $(object)[0].files[0];
                var maxFileSize = $('#DocUploadFormFileSize').val();

                if (file.size > parseInt(maxFileSize) || file.FileSize > parseInt(maxFileSize)) {
                    $(object).after('<span class="help-block">The file size to big</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        function IsRequired(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var value = $(object).val();
            if (value.length <= 0) {
                $(object).after('<span class="help-block">Is required.</span>');
                $(object).parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }

        function MustNumber(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
            var value = $(object).val();
            if (!numericReg.test(value)) {
                $(object).after('<span class="help-block">Numeric characters only.</span>');
                $(object).parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }

        function LessThan150(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var value = $(object).val();
            if (value.length > 0) {
                if (parseInt(value) < 150) {
                    $(object).after('<span class="help-block">The score not valid</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                }
                else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }

            return IsValid;
        }

        function FromUntilValidate(object_from, object_until) {
            var IsValid = true;
            var from_date = "";
            var until_date = "";
            $(object_from).parent().find('span').remove();
            $(object_from).parent().removeClass('has-error');
            $(object_from).parent().removeClass('has-success');

            $(object_until).parent().find('span').remove();
            $(object_until).parent().removeClass('has-error');
            $(object_until).parent().removeClass('has-success');

            until_date = $(object_until).val();
            fromDate = $(object_from).val();
            if (from_date != null && until_date != null) {
                if (from_date.length > 0 && until_date.length > 0) {
                    var from = from_date.split('/');
                    var fromDate = new Date(from[1] + '/' + from[0] + '/' + from[2]);

                    var until = until_date.split('/');
                    var untilDate = new Date(until[1] + '/' + until[0] + '/' + until[2]);

                    if (fromDate >= untilDate) {
                        $(object_from).after('<span class="help-block">The date range not valid</span>');
                        $(object_from).parent().addClass('has-error');

                        $(object_until).after('<span class="help-block">The date range not valid</span>');
                        $(object_until).parent().addClass('has-error');
                        IsValid = false;
                    }
                    else {
                        $(object_from).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                        $(object_from).parent().addClass('has-success');

                        $(object_until).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                        $(object_until).parent().addClass('has-success');
                        IsValid = true;
                    }
                }
            }
            return IsValid;
        }

    });
</script>

