@model DKUPPU.ViewModels.CPLApprovalFormViewModel

@{
    ViewBag.Title = "Revise";
}

<div class="jarviswidget jarviswidget-sortable" data-widget-editbutton="false" data-widget-colorbutton="false" role="widget">
    <header>
        <span class="widget-icon"><i class="fa fa-eye"></i></span>
        <h2>Revise Form</h2>
        <span class="jarviswidget-loader">
            <i class="fa fa-refresh fa-spin"></i>
        </span>
    </header>
    <div role="content">
        <div class="jarviswidget-editbox"> </div>
        <div class="widget-body">

            <!--Data Applicant Begin-->
            @Html.Partial("../MstRegisterForm/_DataApplicantForm", Model.Applicant)


            <!--Data Applican End-->
            <!--Form Begin-->
            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    <!--ID Primary-->
                    @Html.HiddenFor(model => model.TrxLicenseViewModel.id_trx_license)
                    @Html.HiddenFor(model => model.TrxLicenseViewModel.id_applicant)
                    @Html.HiddenFor(model => model.TrxLicenseViewModel.id_license_category)
                    @Html.HiddenFor(model => model.TrxLicenseViewModel.id_license_type)
                    @Html.HiddenFor(model => model.TrxLicenseViewModel.id_sop_type)


                    <div class="form-group">
                        @Html.LabelFor(model => model.ppl_license_no, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.cpl_license_no, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.radio_phone_no, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.radio_phone_no, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                        @Html.LabelFor(model => model.total_flying_hours, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.total_flying_hours, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TrxLicenseViewModel.aircraft_category_rating, htmlAttributes: new { @class = "control-label col-md-2 text-left" })
                        <div class="col-md-10">
                            @{ string vchecked = ""; }
                            @foreach (var item in (IEnumerable<DKUPPU.ViewModels.MstLookupViewModel>)ViewBag.aircraft_category_rating)
                            {
                                vchecked = "";
                                if (item.lookup_value == Model.TrxLicenseViewModel.aircraft_category_rating) { vchecked = "checked"; }
                                <label class="radio radio-inline">
                                    <input id="radio-aircraft-ratting" type="radio" class="radio-aircraft-ratting radiobox" name="radio-aircraft-ratting" value="@Html.DisplayFor(a=>item.lookup_value)" @vchecked disabled />
                                    <span>@Html.DisplayFor(a => item.lookup_value)</span>
                                </label>
                            }
                        </div>
                    </div>
                    <!--List Aircarft Ratting-->
                    <div class="form-group">
                        <div class="col-xs-2"></div>
                        <div class="col-xs-9" id="list-aircraft-class-ratting">
                            @Html.Partial("../TrxReviseForm/_AircraftClassRatingForm", Model.TrxLicAircraftCategoryRatingViewModel)
                        </div>
                    </div>

                    <!--PPC Type Ratting-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.ppc_type_ratting, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-9" id="list-ppc-ratting">
                            @Html.Partial("../TrxReviseForm/_PPCTypeRatingForm", Model.TrxLicPpcViewModel)
                        </div>
                    </div>

                    <!--Instrument Rating Ratting-->
                    <legend>Instrument Rating</legend>
                    <fieldset>
                        <div class="col-md-12">
                            @Html.Partial("../TrxReviseForm/_LicInstrumentRattingForm", Model.TrxLicInstrumentRatingViewModel)
                        </div>
                    </fieldset>


                    <div class="row">
                        <div class="col-xs-6">
                            <legend>
                                Aircraft Type Rating
                            </legend>
                            @Html.Partial("../TrxRegisterForm/_LicAircraftTypeRattingForm", Model.TrxLicAircraftTypeRatingViewModel)
                        </div>
                        <div class="col-xs-6">
                            <legend>Medical Class</legend>
                            @Html.Partial("../TrxReviseForm/_LicMedicalCertificate", Model.TrxLicMedicalCertificateViewModel)
                        </div>
                    </div>
                    @if (Model.TrxLicTechnicalNoteViewModel != null)
                    {
                        <fieldset>
                            <legend>Upload Document</legend>
                            @Html.Partial("../MstApprovalForm/_LicTechnicalNote", Model.TrxLicTechnicalNoteViewModel)
                        </fieldset>

                    }
                    <fieldset>
                        <legend>Upload Document</legend>
                        @Html.Partial("../TrxReviseForm/_DocUploadForm", Model.MstDocUploadViewModel)
                    </fieldset>
                    <div id="error">
                        <input type="checkbox" id="checkbox-disclaimer" />
                        I understand and aware of my responsibility as a representative of the company or organization as assigned.
                        I further certify under penalty of perjury under Republic of Indonesia law that the information filled in the form above is true and correct.
                    </div>
                    <div class="form-actions">
                        <button id="submit" class="btn btn-primary" type="submit"> Submit </button>
                        <a href="@Url.Action("Index","Home")" class="btn btn-default"> Cancel </a>
                    </div>
                </div>
                    <!--End Form-->
            }
        </div>
    </div>
</div>


<script>
    $(function () {
        /** PPL on Change **/
        $('#ppl_license_no').change(function () {
            var id_trx_license = $(this).val();
            GetTrxLicenseByMstLicense(id_trx_license);
            GetAircraftClassRattingByMstLicense(id_trx_license);
            GetPPCRattingByMstLicense(id_trx_license);
            GetMedicalCheckByMstLicense(id_trx_license);
        });

        /** Get Trx License */
        function GetTrxLicenseByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetTrxLicenseByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license
                },
                dataType: 'JSON',
                beforeSend: function () {
                    var img = '<div class="row">' +
                                '<div class="col-xs-12"><div style="text-align:center;height:200px;padding-top:75px"><img style="width:50px;height:50px" src="@DKUPPU.Helpers.ImageLoader.Loader" /></div>' +
                                '</div></div>';
                    $('#list-aircraft-class-ratting').html(img);
                },
                success: function (data) {
                    $('#radio-aircraft-ratting-' + data.aircraft_category_rating).attr('checked', true);
                }
            });
        }

        function GetAircraftClassRattingByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetAircraftClassRattingByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-aircraft-class-ratting').html(data);
                }
            });
        }

        function GetPPCRattingByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetPPCRattingByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-ppc-ratting').html(data);
                }
            });
        }

        function GetMedicalCheckByMstLicense(id_mst_license) {
            $.ajax({
                url: '@Url.Action("GetMedicalCheckByMstLicense", "AJAX")',
                data: {
                    id_mst_license: id_mst_license,
                    id_sop_type: $("#id_sop_type").val(),
                },
                dataType: 'html',
                success: function (data) {
                    $('#list-medical-certificate').html(data);
                }
            });
        }
        // datepicker
        $('.date-picker').datepicker({
            //options
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            minDate: '12/12/2015'
            //...
        });

        //** Validasi form
        $('form').submit(function () {
            //return false;
            var hasError = 0;
            $form = $('form:first');

            //validasi file type
            $.each($form.find('input[type="file"]'), function (i, val) {
                if (!FileValidation($(this))) {
                    hasError = hasError + 1;
                }
                if (!FileSize($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi is required
            $.each($form.find('.required-value'), function (i, val) {
                if (!IsRequired($(this))) {
                    hasError = hasError + 1;
                }
            });

            //validasi numeric
            if (!MustNumber($('#total_flying_hours'))) {
                hasError = hasError + 1;
            }
            if (!LessThan150($('#total_flying_hours'))) {
                hasError = hasError + 1;
            }

            //validasi date form - until
            $.each($form.find('.from-date'), function (i, val) {
                var suffix = parseInt($(this).attr('id').match(/\d+/));
                var $thisTr = $(this).parent().parent();
                var objec_until = $thisTr.find(':input.until-date:first');
                if (!FromUntilValidate($(this), objec_until)) {
                    hasError = hasError + 1;
                }
            });
            $.each($form.find('.until-date'), function (i, val) {
                var suffix = parseInt($(this).attr('id').match(/\d+/));
                var $thisTr = $(this).parent().parent();
                var objec_from = $thisTr.find(':input.from-date:first');
                if (!FromUntilValidate(objec_from, $(this))) {
                    hasError = hasError + 1;
                }
            });

            //if hasError has value more than 0 that return false
            if (hasError > 0) {
                return false;
            }
            //return false;
        });

        //validasi is required
        $('.required-value').keyup(function () {
            IsRequired($(this));
        });

        $('.required-value-dropdown').change(function () {
            IsRequired($(this));
        });

        $('.required-value.date-picker').change(function () {
            IsRequired($(this));
        });

        $('.from-date').change(function () {
            var suffix = parseInt($(this).attr('id').match(/\d+/));
            var $thisTr = $(this).parent().parent();
            var objec_until = $thisTr.find('.until-date:first');
            IsRequired($(this));
            FromUntilValidate($(this), objec_until);
        });

        $('until-date').change(function () {
            var suffix = parseInt($(this).attr('id').match(/\d+/));
            var $thisTr = $(this).parent().parent();
            var objec_from = $thisTr.find(':input.from-date:first');
            IsRequired($(this));
            FromUntilValidate(objec_from, $(this));
        });

        // validasi numerik and less than 150
        $('#total_flying_hours').keyup(function () {
            if (MustNumber($(this))) {
                LessThan150($(this));
            }

        });

        //validasi file type
        $('input[type="file"]').on("change", function () {
            if (FileValidation($(this))) {
                FileSize($(this));
            }
        });

        function FileValidation(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');

            var allowedExtensions = ["jpg", "pdf", "png"];

            var value = $(object).val(),
                        file = value.toLowerCase(),
                        extension = file.substring(file.lastIndexOf('.') + 1);
            if ($(object).val().length > 0) {
                if ($.inArray(extension, allowedExtensions) == -1) {
                    $(object).after('<span class="help-block">Invalid File. Please upload a File with extension: ' + allowedExtensions.join(", ") + '</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        // validasi file size document upload
        function FileSize(object) {
            var IsValid = true;
            if ($(object).val().length > 0) {
                $(object).parent().find('span').remove();
                $(object).parent().removeClass('has-error');
                $(object).parent().removeClass('has-success');
                var file = $(object)[0].files[0];
                var maxFileSize = $('#DocUploadFormFileSize').val();

                if (file.size > parseInt(maxFileSize) || file.FileSize > parseInt(maxFileSize)) {
                    $(object).after('<span class="help-block">The file size to big</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                } else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }
            return IsValid;
        }

        function IsRequired(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var value = $(object).val();
            if (value.length <= 0) {
                $(object).after('<span class="help-block">Is required.</span>');
                $(object).parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }

        function MustNumber(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
            var value = $(object).val();
            if (!numericReg.test(value)) {
                $(object).after('<span class="help-block">Numeric characters only.</span>');
                $(object).parent().addClass('has-error');
                IsValid = false;
            }
            else {
                $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                $(object).parent().addClass('has-success');
                IsValid = true;
            }
            return IsValid;
        }

        function LessThan150(object) {
            var IsValid = true;
            $(object).parent().find('span').remove();
            $(object).parent().removeClass('has-error');
            $(object).parent().removeClass('has-success');
            var value = $(object).val();
            if (value.length > 0) {
                if (parseInt(value) < 150) {
                    $(object).after('<span class="help-block">The score not valid</span>');
                    $(object).parent().addClass('has-error');
                    IsValid = false;
                }
                else {
                    $(object).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                    $(object).parent().addClass('has-success');
                    IsValid = true;
                }
            }

            return IsValid;
        }

        function FromUntilValidate(object_from, object_until) {
            var IsValid = true;
            var from_date = "";
            var until_date = "";
            $(object_from).parent().find('span').remove();
            $(object_from).parent().removeClass('has-error');
            $(object_from).parent().removeClass('has-success');

            $(object_until).parent().find('span').remove();
            $(object_until).parent().removeClass('has-error');
            $(object_until).parent().removeClass('has-success');

            until_date = $(object_until).val();
            from_date = $(object_from).val();
            if (from_date != null && until_date != null) {
                if (from_date.length > 0 && until_date.length > 0) {
                    var from = from_date.split('/');
                    var fromDate = new Date(from[1] + '/' + from[0] + '/' + from[2]);

                    var until = until_date.split('/');
                    var untilDate = new Date(until[1] + '/' + until[0] + '/' + until[2]);

                    if (fromDate >= untilDate) {
                        $(object_from).after('<span class="help-block">The date range not valid</span>');
                        $(object_from).parent().addClass('has-error');

                        $(object_until).after('<span class="help-block">The date range not valid</span>');
                        $(object_until).parent().addClass('has-error');
                        IsValid = false;
                    }
                    else {
                        $(object_from).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                        $(object_from).parent().addClass('has-success');

                        $(object_until).after('<span class="form-control-feedback pull-left"><i class="fa fa-check"></i></span>');
                        $(object_until).parent().addClass('has-success');
                        IsValid = true;
                    }
                }
            }
            return IsValid;
        }

        // ADD MEDICAL
        $(function () {
            $('#add-medical-certificate').click(function (e) {
                var $tabelData = $('#table-medical');
                addRow(e, $tabelData);
            });
            $('div').on("click", "a.remove-medical-certificate", function (e) {
                var $tabelData = $('#table-medical');
                Remove(e, $tabelData);
            });
            function addRow(e, $tabelData) {
                e.preventDefault();
                var trLenght = $tabelData.find('tr.new-tr').length;
                if (parseInt(trLenght) < 1) {
                    var $trLast = $tabelData.find("tr:last");
                    var $trNew = $trLast.clone();

                    var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
                    var oldNTr = $trNew.attr('id');
                    var newNTr = oldNTr.replace('-' + suffix, '-' + (parseInt(suffix) + 1));
                    $trNew.attr('id', newNTr);
                    $trNew.removeClass('old-tr');
                    $trNew.addClass('new-tr');
                    $.each($trNew.find(':input'), function (i, val) {

                        // Replaced Name
                        var oldN = $(this).attr('name');
                        var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                        $(this).attr('name', newN);

                        // Replaced ID
                        var oldID = $(this).attr('id');
                        var newID = oldID.replace('_' + suffix + '_', '_' + (parseInt(suffix) + 1) + '_');
                        $(this).attr('id', newID);

                        $(this).val('');
                        $(this).removeAttr('readonly');
                    });
                    $.each($trNew.find('.date-filed'), function (i, val) {
                        $(this).removeClass('hasDatepicker');
                        $(this).datepicker({
                            //options
                            dateFormat: 'dd/mm/yy',
                            changeMonth: true,
                            changeYear: true,
                            //...
                        });
                    });

                    var med_no = 'SECOND';
                    $.each($trNew.find('#TrxLicMedicalCertificateViewModel_' + (parseInt(suffix) + 1) + '__med_certi_no'), function (i, val) {
                        $(this).val(med_no);
                    });

                    $.each($trNew.find('#TrxLicMedicalCertificateViewModel_' + (parseInt(suffix) + 1) + '__from_date'), function (i, val) {
                        $(this).addClass('from-date');
                    });

                    $.each($trNew.find('#TrxLicMedicalCertificateViewModel_' + (parseInt(suffix) + 1) + '__until_date'), function (i, val) {
                        $(this).addClass('until-date');
                    });

                    $trLast.after($trNew);
                }

            }

            function Remove(e, $tabelData) {
                e.preventDefault();
                var trLenght = $tabelData.find('tr.new-tr').length;
                if (parseInt(trLenght) == 1) {
                    var trTodelete = $tabelData.find('tr.new-tr');
                    trTodelete.remove();
                }
            }
        });

    });
</script>
