@model IEnumerable<DKUPPU.ViewModels.TrxLicCompetencyCheckViewModel>
@{
    Layout = null;
}
<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Ratting</th>
                <th>Aircraft / SIM</th>
                <th>Date Of Checks</th>
                <th>Valid Until</th>
            </tr>
        </thead>
        <tbody id="TrxLicCompetencyCheckViewModel">
            @{
                int j = 0;
                string vreadonly = "";
                string vrequered = "";
                string datepicker = "";
                string vdisabled = "";
            }
            @foreach (DKUPPU.ViewModels.TrxLicCompetencyCheckViewModel item in Model.OrderBy(a => a.updated_date))
            {
                vreadonly = "readonly='readonly'";
                vrequered = "";
                datepicker = "";
                vdisabled = @"'disabled','disabled'";
                if (item.is_history == false || item.is_history == null)
                {
                    vreadonly = "";
                    vrequered = "required-value";
                    datepicker = "date-picker";
                    vdisabled = "";
                }
                <tr id="TrxLicCompetencyCheckViewModel_@j" class="old-tr">
                    <td>
                        <input type="hidden" name="TrxLicCompetencyCheckViewModel[@j].id_rating" id="TrxLicCompetencyCheckViewModel_@j.ToString()__id_rating" required="required" value="@Html.DisplayFor(a => item.id_rating)">
                        <input type="hidden" name="TrxLicCompetencyCheckViewModel[@j].id_trx_lic_competency_check" id="TrxLicCompetencyCheckViewModel_@j.ToString()__id_trx_lic_competency_check" value="@Html.DisplayFor(a => item.id_trx_lic_competency_check)">

                        @if (item.is_history == false || item.is_history == null)
                        {
                            <input type="hidden" name="TrxLicCompetencyCheckViewModel[@j].id_rating_value" id="TrxLicCompetencyCheckViewModel_@j.ToString()__id_rating_value" value="@Html.DisplayFor(a => item.id_rating_value)">
                            <input type="text" class="form-control" name="TrxLicCompetencyCheckViewModel[@j].rating" id="TrxLicCompetencyCheckViewModel_@j.ToString()__rating" value="@Html.DisplayFor(a => item.rating)" readonly="readonly">
                        }
                        else
                        {
                            <input type="hidden" name="TrxLicCompetencyCheckViewModel[@j].rating" id="TrxLicCompetencyCheckViewModel_@j.ToString()__rating" value="@Html.DisplayFor(a => item.rating)">
                            <input type="text" class="form-control copetency_type_rating" name="TrxLicCompetencyCheckViewModel[@j].id_rating_value" id="TrxLicCompetencyCheckViewModel_@j.ToString()__id_rating_value" value="@Html.DisplayFor(a => item.rating)" @vreadonly>
                        }
                    </td>
                    <td>
                        @Html.DropDownList("TrxLicCompetencyCheckViewModel[" + j.ToString() + "].id_air_sim_type", (IEnumerable<SelectListItem>)ViewBag.AircraftOrSIM, "Select Aircraft / Rating", new { @class = "form-control AircraftOrSIM", @id = "TrxLicCompetencyCheckViewModel_" + j.ToString() + "__id_air_sim_type" })
                        @if (!(item.id_air_sim_type == null || item.id_air_sim_type == ""))
                        {
                            <script>
                                $(function () {
                                    $('#TrxLicCompetencyCheckViewModel_@j.ToString()__id_air_sim_type').ready(function () {

                                        $('#TrxLicCompetencyCheckViewModel_@j.ToString()__id_air_sim_type option[value=@item.id_air_sim_type]').attr('selected', 'selected');
                                    })

                                })
                            </script>
                        }
                        @if (!(item.is_history == false || item.is_history == null))
                        {
                            <script>
                                $(function () {
                                    $('#TrxLicCompetencyCheckViewModel_@j.ToString()__id_air_sim_type').ready(function () {
                                        $('#TrxLicCompetencyCheckViewModel_@j.ToString()__id_air_sim_type').attr(@Html.Raw(vdisabled));
                                    })
                                })
                            </script>
                        }
                        <input type="hidden" name="TrxLicCompetencyCheckViewModel[@j].id_air_sim_type" id="TrxLicCompetencyCheckViewModel_@j.ToString()__id_air_sim_type_2" value="@Html.DisplayFor(m => item.id_air_sim_type)" />

                    </td>
                    <td>
                        <input type="text" class="form-control @vrequered @datepicker  date-field checked_date" name="TrxLicCompetencyCheckViewModel[@j].checked_date" id="TrxLicCompetencyCheckViewModel_@j.ToString()__checked_date" value="@Html.DisplayFor(a => item.checked_date)" @vreadonly>
                    </td>
                    <td>
                        <input type="text" class="form-control @vrequered @datepicker  date-field expired_date" name="TrxLicCompetencyCheckViewModel[@j].expired_date" id="TrxLicCompetencyCheckViewModel_@j.ToString()__expired_date" value="@Html.DisplayFor(a => item.expired_date)" @vreadonly>
                    </td>
                </tr>
                        j++;
            }
        </tbody>

    </table>
</div>
@if (ViewBag.HistoryOfTypeAircraftCom != null)
{
    @Html.DropDownList("dropdown-typerating-com", (IEnumerable<SelectListItem>)ViewBag.HistoryOfTypeAircraftCom, "Select Type Aircraft :", new { @class = "form-control copetency_type_rating", id = "dropdown-typerating-com", @style = "display:none" })

}

<script>

    $(function () {
        /*
        $('.id_type_rating').change(function () {
            var id = $(this).attr('id');
            var itemText = $('#' + id + ' option:selected').text();
            var itemValue = $(this).val();
            var index = parseInt($(this).attr('name').match(/\d+/));
            $('#TrxLicCompetencyCheckViewModel_' + index + '__rating').val(itemText);
            $('#TrxLicCompetencyCheckViewModel_' + index + '__id_rating').val(itemValue);
            $('#TrxLicCompetencyCheckViewModel_' + index + '__type_rating_value').val(itemText);

        });
        */
        // datepicker
        $('.date-picker').datepicker({
            //options
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            //...
        });
        $('div').on('change', 'select.copetency_type_rating', function (e) {
            e.preventDefault();
            var id = $(this).attr('id');
            var itemText = $('#' + id + ' option:selected').text();
            var itemValue = $(this).val();
            var index = parseInt($(this).attr('name').match(/\d+/));
            $('#TrxLicCompetencyCheckViewModel_' + index + '__rating').val(itemText);
            $('#TrxLicCompetencyCheckViewModel_' + index + '__id_rating').val(itemValue);
        });

        $('div').on('click', 'a.add-competency', function (e) {
            e.preventDefault();
            var $competency = $('#TrxLicCompetencyCheckViewModel');
            addRowTrxLicCompetencyCheckViewModel(e, $competency);
        });

        $('div').on("click", "a.remove-competency", function (e) {
            var $tabelData = $('#TrxLicCompetencyCheckViewModel');
            removeRowTrxLicCompetencyCheckViewModel(e, $tabelData);
        });

        function addRowTrxLicCompetencyCheckViewModel(e, $tabelData) {
            e.preventDefault();
            var $trLast = $tabelData.find("tr:last");
            var trLenght = $tabelData.find('tr.new-tr').length;
            if (parseInt(trLenght) < 1) {
                var $trNew = $trLast.clone();

                var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);

                $trNew.removeClass('old-tr');
                $trNew.addClass('new-tr');

                var oldNTr = $trNew.attr('id');
                var newNTr = oldNTr.replace('_' + suffix, '_' + (parseInt(suffix) + 1));
                $trNew.attr('id', newNTr);
                $.each($trNew.find(':input'), function (i, val) {

                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                    $(this).attr('name', newN);

                    // Replaced ID
                    var oldID = $(this).attr('id');
                    var newID = oldID.replace('_' + suffix + '_', '_' + (parseInt(suffix) + 1) + '_');
                    $(this).attr('id', newID);

                    $(this).val('');
                    $(this).removeClass("input-validation-error");
                    $(this).removeAttr('readonly');
                    $(this).removeAttr('disabled');
                });

                $.each($trNew.find(':input.copetency_type_rating'), function (i, val) {
                    var name = $(this).attr('name');
                    var id = $(this).attr('id');
                    var $dropdown = $('#dropdown-typerating-com');
                    $dropdown.removeAttr('style');
                    //$dropdown.addClass('required-value-dropdown');
                    $dropdown.attr('name', name);
                    $dropdown.attr('id', id);
                    $(this).after($dropdown);
                    $(this).remove();
                });


                $.each($trNew.find(':input.date-field'), function (i, val) {
                    $(this).removeClass("hasDatepicker");
                    $(this).datepicker({
                        dateFormat: 'dd/mm/yy',
                        changeMonth: true,
                        changeYear: true
                    });

                    $(this).keypress(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keydown(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keyup(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });
                });
                $(':input.hasDatepicker').each(function () {
                    /*
                    jQuery(this).on("keypress keyup blur", function (event) {
                        $(this).val($(this).val().replace(/[^\d].+/, ""));
                        if ((!event.which < 48 || !event.which > 57)) {
                            event.preventDefault();
                        }
                    });
                    */

                    $(this).keypress(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keydown(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });

                    $(this).keyup(function (e) {
                        var key = e.charCode || e.keyCode;

                        if (key == 13) {
                            // enter key do nothing
                        }
                        else {
                            e.preventDefault();
                        }
                    });
                });
                $trLast.after($trNew);
            }
        }
        function removeRowTrxLicCompetencyCheckViewModel(e, $tabelData) {
            e.preventDefault();
            var trLenght = $tabelData.find('tr.new-tr').length;
            if (parseInt(trLenght) == 1) {
                var trTodelete = $tabelData.find('tr.new-tr');
                trTodelete.remove();
            }
        }
    });
</script>


